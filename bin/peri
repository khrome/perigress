#!/usr/bin/env node
const CLApp = require('app-term-kit');
const Perigress = require('../perigress');


let app = new CLApp('perigress', {
    copyright : 'Abbey Hawk Sparrow',
    copystart : '2022',
    defaults : `{
  // This file was autogenerated by perigress
  //
  "debug": false
}`
});

app.command({
    name : 'server',
    description: 'Run a server from a definition',
    examples : [
        [
            '$0 xpath "//table/tbody/tr" dump.html',
            'select all table rows in the file `dump.html`'
        ]
    ],
    action : function(argv, target, complete){
        //let path =
        //
    }
});

app.command({
    name : 'generate-tables',
    description: 'Synthetic tables from a definition',
    examples : [],
    action : function(argv, target, complete){
        let path = argv.api || target || path.join(__dirname, '../../..')
        let perigress = new Perigress.DummyAPI(path);
        perigress.generateDataDefinitions({}, (err, result)=>{
            console.log(result);
            complete();
        });
        //
    }
});

app.command({
    name : 'generate-migration',
    description: 'Synthetic tables from a definition',
    examples : [],
    action : function(argv, target, complete){
        let path = argv.api || target || path.join(__dirname, '../../..');
        let destination = argv._.shift();
        let incoming = (argv._.shift() || 'ups').trim();
        let type = null;
        if(incoming === 'up') type = 'ups';
        if(incoming === 'down') type = 'downs';
        let perigress1 = new Perigress.DummyAPI(path);
        let perigress2 = new Perigress.DummyAPI(destination);
        perigress1.generateMigrations(perigress2, {}, (err, result)=>{
            console.log((result[type]||[]).join(";\n"));
            complete();
        });
        //
    }
});

app.command({
    name : 'generate-data',
    description: 'Synthetic tables from a definition',
    examples : [],
    action : function(argv, target, complete){
        let path = argv.api || target || path.join(__dirname, '../../..')
        let incoming = (argv._.shift()).trim();
        let id = (argv._.shift() || '').trim();
        let perigress = new Perigress.DummyAPI(path);
        perigress.ready.then(()=>{
            let e = perigress.endpoints.find((e)=> e.options.name === incoming);
            if(e){
                let num = (id || Math.random()+'');
                e.generate(num, (err, result)=>{
                    console.log(JSON.stringify(result, null, '    '));
                    complete();
                });
            }else{
                console.log('could not find endpoint: '+incoming);
            }
        });
    }
});

app.argument('api', 'string', 'Path to the directory defining the API', 1);
app.argument('sequelize', 'boolean', 'Output sequelize scripts for data definitions', 0);
app.argument('sql', 'boolean', 'Output raw SQL for data definitions', 0);

app.header();
app.footer();
app.help();
app.run((err)=>{
    if(err) console.log(err);
});
